diff -Naur mutella-0.4.5~/mutella/uiremote.cpp mutella-0.4.5/mutella/uiremote.cpp
--- mutella-0.4.5~/mutella/uiremote.cpp	2009-08-03 13:27:43.000000000 -0500
+++ mutella-0.4.5/mutella/uiremote.cpp	2009-08-03 13:28:07.000000000 -0500
@@ -575,11 +575,11 @@
 	{
 		// login -- HTTP-Basic so far
 		bool bLoginOK = false;
-		char * pszAuth = NULL;
+		const char * pszAuth = NULL;
 		if ( (pszAuth = strstr(szHandshake, "Authorization:")) )
 		{
 			// extract authorization line
-			char * pRN = strstr(pszAuth, "\r\n");
+			const char * pRN = strstr(pszAuth, "\r\n");
 			CString sAuthLine(pszAuth + strlen("Authorization:"), pRN-pszAuth-strlen("Authorization:"));
 			int nPos = sAuthLine.find("Basic");
 			if (nPos>=0)
@@ -616,7 +616,7 @@
 	const char* pszCookie;
 	if( (pszCookie = strstr(szHandshake, "Cookie:")) )
 	{
-		char * pRN = strstr(pszCookie, "\r\n");
+		const char * pRN = strstr(pszCookie, "\r\n");
 		CString sCookieLine(pszCookie + strlen("Cookie:"), pRN-pszCookie-strlen("Cookie:"));
 		// we will split the line by "; " combination
 		list<CString> Cookies;
diff -Naur mutella-0.4.5~/mutella/uiterminal.cpp mutella-0.4.5/mutella/uiterminal.cpp
--- mutella-0.4.5~/mutella/uiterminal.cpp	2009-08-03 13:27:43.000000000 -0500
+++ mutella-0.4.5/mutella/uiterminal.cpp	2009-08-03 13:27:59.000000000 -0500
@@ -251,7 +251,7 @@
 	ASSERT(m_pMaster);
 	ASSERT(m_pController);
 	// parse the string to isolate the last word
-	if (part[part.size()-1]==' ')
+	if (part.size() && part[part.size()-1]==' ')
 		return false; // sort of quick workaround for situation like command<SPACE>
 	CString s = StripWhite(part);
 	int nPos = s.rfind(" ");
diff -Naur mutella-0.4.5~/mutella/common.h mutella-0.4.5/mutella/common.h
--- mutella-0.4.5~/mutella/common.h	2009-08-03 13:27:43.000000000 -0500
+++ mutella-0.4.5/mutella/common.h	2009-08-03 13:27:59.000000000 -0500
@@ -50,7 +50,7 @@
 bool QueryMatch(CString Result, const CString& Query);
 // fast functions which do not copy the string
 void MakeWordList(LPSTR szQuery, vector<char*>& QWords);
-void MakeWordList(LPSTR szQuery, vector<char*>& QWords, vector<char*>& QWords);
+void MakeWordList(LPSTR szQuery, vector<char*>& QWords, vector<char*>& QWords2);
 bool MatchWordList(const CString& ResultLower, const vector<char*>& QWords, bool bMatchAll = true);
 
 // slower but 'storage-independent' versions
diff -Naur mutella-0.4.5~/mutella/gnushare.h mutella-0.4.5/mutella/gnushare.h
--- mutella-0.4.5~/mutella/gnushare.h	2009-08-03 13:27:43.000000000 -0500
+++ mutella-0.4.5/mutella/gnushare.h	2009-08-03 13:27:59.000000000 -0500
@@ -26,6 +26,7 @@
 #include "mthread.h"
 
 class MGnuDirector;
+class MShareThread;
 
 class MGnuShare  
 {
diff -Naur mutella-0.4.5~/mutella/mutella.h mutella-0.4.5/mutella/mutella.h
--- mutella-0.4.5~/mutella/mutella.h	2009-08-03 13:27:43.000000000 -0500
+++ mutella-0.4.5/mutella/mutella.h	2009-08-03 13:27:59.000000000 -0500
@@ -45,6 +45,7 @@
 #include <memory>
 #include <vector>
 #include <string>
+#include <cstring>
 #include <list>
 
 #ifdef HAVE_LIMITS
diff -Naur mutella-0.4.5~/mutella/tstring.h mutella-0.4.5/mutella/tstring.h
--- mutella-0.4.5~/mutella/tstring.h	2009-08-03 13:27:43.000000000 -0500
+++ mutella-0.4.5/mutella/tstring.h	2009-08-03 13:27:59.000000000 -0500
@@ -23,6 +23,7 @@
 
 #include <stdarg.h>
 #include <iostream>
+#include <climits>
 
 #ifdef TSTRING_DEBUG
 
@@ -450,6 +451,7 @@
 			ASSERT(m_pBuffer);
 		}
 	}
+public:
 	void _reallocNtail(int nAdd, LPCT pTail = NULL){
 #ifdef CHECK_RANGE
 		if ( nAdd < 0 )
@@ -499,6 +501,7 @@
 		}
 		m_pBuffer[m_nLength] = _null;
 	}
+protected:
 /*	void _reallocNtail(int nAdd, LPCT pTail = NULL){
 #ifdef CHECK_RANGE
 		if ( nAdd < 0 )
@@ -597,15 +600,19 @@
 	static int _strchr(LPCT stack, T needle); // same as above
 	static int _strrstr(LPCT stack, LPCT needle);
 	static int _strrchr(LPCT stack, T needle);
+public:
 	static int _strcmp(LPCT left, LPCT right); // returns -1, 0 or 1
+protected:
 	static void _makelower(LPT str, int len);
 	static void _makeupper(LPT str, int len);
 	static int _vsnprintf(LPT str, int size, const char *format, va_list ap);
 	static T _null;
+public:
 	// data
 	T* m_pBuffer;
 	int m_nBufferSize;
 	int m_nLength;
+protected:
 	// friends
 	friend bool operator== <>(const TString<T>& lhs, const TString<T>& rhs);
 	friend bool operator== <>(const TString<T>& lhs, typename TString<T>::LPCT pszRhs);
